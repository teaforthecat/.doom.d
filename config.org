#+TITLE: Doom Config El

The first thing to do, after installing doom(following the instructions of
course), is to start configuring. Since I had seen others do literate configs, I
knew that an org file could output an elisp file, and that could be use as the
config. This is also called "tangling". This is a great way to maintain code. It
looks nicer than comments, and can be exported to html for others to peruse online:).
There are a few steps to take before even starting to configuring emacs in this
way, however.

1. uncomment the line that contain "literal" in `~/.doom.d/init.el`.
2. move config.el to config.org
3. prepend the file with lines: `#+TITLE: Doom Config`, then `#+BEGIN_SRC emacs-lisp`
4. append `#+END_SRC` to the bottom of the file

Now you have a literate file; the source block will be exported to `config.el`
and loaded. Next, Doom needs to rethink itself, strategize.

1. exit emacs
2. run `~/.doom.d/bin/doom sync`
3. start emacs and continue configuring ad inititum

Keep adding source blocks with descriptive text above it like this one:) To
evaluate the source block, i.e.: test it, type `C-c C-c` with the cursor inside
it.

And you're off! Enjoy life as an emacs hacker with the hugely productive boost
that Doom has given you.

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Chris Thopmson"
      user-mail-address "teaforthecat@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :name "Inconsolata" :size 19 :weight 'normal
                               :width 'normal)
      ;; I don't know what variable-pitch-font is
      ;; doom-variable-pitch-font (font-spec :family "sans" :size 13)
      )


;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
(map!
 :nv "SPC c l" #'evilnc-comment-or-uncomment-lines
 :nv "t" #'evil-avy-goto-char-2
 :v "v" #'er/expand-region
 :n "n" #'evil-scroll-down
 :n "N" #'evil-scroll-up
 :n "SPC k x" #'sp-kill-hybrid-sexp
 )

(add-to-list 'initial-frame-alist '(fullscreen . maximized))

#+END_SRC

#+RESULTS:
: ((fullscreen . maximized))
